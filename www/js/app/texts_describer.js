(function(){var childnames,childrendesc,childrennames,descparts,describe,exportTo,k,nochildrendesc,numberStr,objectdesc,orderNumberStr,positiondesc,process,shortdesc,v,youhaveentered,_ref,_ref1;_ref=typeof require==="undefined"?CATS.texts:require("./texts_funcs"),numberStr=_ref.numberStr,orderNumberStr=_ref.orderNumberStr;descparts={theabsolute:{sv:"absolutbeloppet",en:"the absolute value"},absolute:{sv:"absolutbelopp",en:"absolute value"},aabsolute:{sv:"ett absolutbelopp",en:"an absolute value"},aisinteger:{sv:"ett heltalstest",en:"an integer test"},aDIVTEST:{sv:"ett delbarhetstest",en:"a dividability test"},log:{en:"logarithm",sv:"logaritm"},power:{en:"power",sv:"potens"},sum:{en:"sum",sv:"summa"},fraction:{en:"fraction",sv:"kvot"},product:{en:"product",sv:"produkt"},AND:{en:"conjunction",sv:"konjunktion"},OR:{en:"disjunction",sv:"disjunktion"},equality:{en:"equality",sv:"likhet"},wholenumber:{en:"integer",sv:"heltalet"},thewholenumber:{en:"the integer",sv:"heltalet"},naturalnumber:{en:"natural number",sv:"naturliga talet"},thenaturalnumber:{en:"the natural number",sv:"det naturliga talet"},decimalnumber:{en:"decimal number",sv:"decimaltalet"},thedecimalnumber:{en:"the decimal number",sv:"decimaltalet"},thevariable:{en:"the variable",sv:"variabeln"},theconstante:{en:"the natural constant e",sv:"den naturliga konstanten e"},theconstanti:{en:"the complex constant i",sv:"den komplexa konstanten i"},theconstantpi:{en:"the constant pi",sv:"konstanten pi"},theconstantpercent:{en:"the per cent constant",sv:"procentkonstanten"},theconstantundefined:{en:"the constant undefined",sv:"konstanten odefinierat"},thetruthvalue:{en:"the truth value",sv:"sanningsvärdet"},booltrue:{en:"true",sv:"sant"},boolfalse:{en:"false",sv:"falskt"},amissingvalue:{en:"a missing value",sv:"ett saknat värde"},thenegative:{en:"the negative",sv:"det negativa"},plusminus:{en:"plus minus",sv:"plus minus"},anegation:{en:"a negation",sv:"en negation"},anestednegation:{en:"a nested negation",sv:"en nästlad negation"},anegative:{en:"a negative",sv:"en negativ"},truthopp:{en:"logic negation",sv:"logisk negation"},atruthopp:{en:"a logic negation",sv:"en logisk negation"},anestedtruthopp:{en:"a nested logic negation",sv:"en nästlad logisk negation"},aequality:{en:"an equality",sv:"en likhet"},ainequality:{en:"a forbidden equality",sv:"en förbjuden likhet"},aequation:{en:"an equation",sv:"en ekvation"},astrictcomparison:{en:"a strict comparison",sv:"en strikt jämförelse"},anonstrictcomparison:{en:"a non-strict comparison",sv:"en ickestrikt jämförelse"},the2root:{en:"the quadratic root",sv:"kvadratroten"},the3root:{en:"the cubic root",sv:"kubikroten"},a2root:{en:"a quadratic root",sv:"en kvadratrot"},a3root:{en:"a cubic root",sv:"en kubikrot"},"2root":{en:"quadratic root",sv:"kvadratrot"},"3root":{en:"cubic root",sv:"kubikrot"},aroot:{en:"a root",sv:"en rot"},root:{en:"root",sv:"rot"},the10log:{en:"the base ten logarithm",sv:"tiologaritmen"},theelog:{en:"the natural logarithm",sv:"den naturliga logaritmen"},a10log:{en:"a base ten logarithm",sv:"en tiologaritm"},aelog:{en:"a natural logarithm",sv:"en naturlig logaritm"},"10log":{en:"base ten logarithm",sv:"tiologaritm"},elog:{en:"natural logarithm",sv:"naturlig logaritm"},alog:{en:"a logarithm",sv:"en logaritm"},thelog:{en:"the logarithm",sv:"logaritmen"},log:{en:"logarithm",sv:"logaritm"},thelogbase:{en:"the base",sv:"basen"},thelogtarget:{en:"the target",sv:"målet"},apower:{en:"a power",sv:"en potens"},asum:{en:"a sum",sv:"en summa"},afraction:{en:"a fraction",sv:"en kvot"},aproduct:{en:"a product",sv:"en produkt"},aAND:{en:"a conjunction",sv:"en konjunktion"},aOR:{en:"a disjunction",sv:"en disjunktion"},anobject:{en:"an object",sv:"ett objekt"},thenumerator:{en:"the numerator",sv:"täljaren"},thedenominator:{en:"the denominator",sv:"nämnaren"},thebase:{en:"the base",sv:"basen"},theexponent:{en:"the exponent",sv:"exponenten"},theleftside:{en:"the left side",sv:"vänsterledet"},therightside:{en:"the right side",sv:"högerledet"},theradicand:{en:"the radicand",sv:"radikanden"},therootindex:{en:"the index",sv:"index"},terms:{en:"terms",sv:"termer"},factors:{en:"factors",sv:"faktorer"},andparts:{en:"propositions",sv:"utsagor"},orparts:{en:"propositions",sv:"utsagor"},theXTHsum:{en:"the %X term",sv:"den %X termen"},theXTHproduct:{en:"the %X factor",sv:"den %X faktorn"},theXTHAND:{en:"the %X proposition",sv:"den %X utsagan"},theXTHOR:{en:"the %X proposition",sv:"den %X utsagan"},children:{en:"children",sv:"children"},aifelse:{en:"a logic branching",sv:"en logisk förgrening"},thecond:{en:"the if-condition",sv:"om-villkoret"},thethen:{en:"the then-branch",sv:"så-grenen"},theelse:{en:"the else-branch",sv:"annars-grenen"},thecontent:{en:"the content",sv:"innehållet"},and:{en:"and",sv:"och"},"with":{en:"with",sv:"med"},where:{en:"where",sv:"där"},is:{en:"is",sv:"är"},"in":{en:"in",sv:"i"},of:{en:"of",sv:"av"},youhavechosen:{en:"You have chosen",sv:"Du har valt"},itis:{en:"It is",sv:"Detta är"},thisis:{en:"This is",sv:"Detta är"},youhaveentered:{en:"You have entered",sv:"Du har skrivit in"}};childnames={sum:"terms",product:"factors",AND:"andparts",OR:"orparts"};nochildrendesc=function(o){var _ref1,_ref2;return(_ref1=o.type)==="DIVTEST"||_ref1==="plusminus"||_ref1==="negation"||_ref1==="NOT"||_ref1==="isinteger"||_ref1==="absolute"||o.type==="root"&&o.objs[1].type==="number"&&((_ref2=o.objs[1].val)==="2"||_ref2==="3")||o.type==="log"&&(o.objs[1].type==="const"&&o.objs[1].val==="e"||o.objs[1].type==="number"&&o.objs[1].val==="10")};describe=function(o,lang){if(lang==null){lang="en"}return process(shortdesc(o,false,false,true),lang)};process=function(arr,lang){var n,newpart,part,str,_i,_len;if(lang==null){lang="en"}str="";console.log(arr);for(n=_i=0,_len=arr.length;_i<_len;n=++_i){part=arr[n];if(n&&part!==","){str+=" "}if(part.str&&!descparts[part.str]){throw"UNKNOWN PART"+part.str}newpart=part.str?descparts[part.str][lang]:part.number?numberStr(part.number,lang):part;if(part.hasOwnProperty("order")){newpart=newpart.replace("%X",orderNumberStr(part.order,lang))}str+=newpart;if(part.colon){str+=":"}if(part.dot){str+="."}}return str+"."};childrennames={fraction:["numerator","denominator"],DIVTEST:["numerator","denominator"],power:["base","exponent"],relation:["leftside","rightside"],root:["radicand","rootindex"],log:["logtarget","logbase"],ifelse:["cond","then","else"]};childrendesc=function(o){var arr,child,len,n,_i,_j,_len,_len1,_ref1,_ref2;if(!(o.objs&&!nochildrendesc(o))){return[]}switch(o.type){case"ifelse":return[{str:"where"},{str:"thecond"},{str:"is"}].concat(shortdesc(o.objs[0])).concat([{str:"and"},{str:"thethen"},{str:"is"}]).concat(shortdesc(o.objs[1])).concat([{str:"and"},{str:"theelse"},{str:"is"}]).concat(shortdesc(o.objs[2]));case"log":return[{str:"with"},{str:"thelogbase"}].concat(shortdesc(o.objs[1])).concat([{str:"of"}]).concat(shortdesc(o.objs[1]));case"absolute":return[{str:"logof"}].concat(shortdesc(o.objs[0]));case"sum":case"product":case"AND":case"OR":arr=[];len=o.objs.length;_ref1=o.objs;for(n=_i=0,_len=_ref1.length;_i<_len;n=++_i){child=_ref1[n];arr=arr.concat(shortdesc(child));if(n===len-2){arr.push({str:"and"})}else if(n<len-2){arr.push(",")}}return arr;default:arr=[];_ref2=o.objs;for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){child=_ref2[n];arr=arr.concat([{str:n?"and":"where"},{str:"the"+childrennames[o.type][n]},{str:"is"}].concat(shortdesc(child)))}return arr}};shortdesc=function(o,wasthe,wasneg,withkids,nodive){var arr,base,grade,name,pre,_ref1,_ref2;pre=wasneg?"":"a";switch(o.type){case"absolute":if(nodive){return[{str:"aabsolute"}]}else{return[{str:"theabsolute"},{str:"of"}].concat(shortdesc(o.objs[0]))}case"plusminus":return[{str:"plusminus"}].concat(nodive?[]:shortdesc(o.objs[0]));case"number":return[{str:(wasthe?"":"the")+(parseFloat(o.val)===Math.floor(parseFloat(o.val))?wasneg?"whole":"natural":"decimal")+"number"},(wasneg?"-":"")+o.val];case"variable":return[{str:"thevariable"},o.val];case"const":return[{str:"theconstant"+o.val}];case"true":case"false":return[{str:"thetruthvalue"},{str:"bool"+o.type}];case"void":return[{str:"amissingvalue"}];case"negation":if(nodive){return[{str:"anegation"}]}else{o=o.objs[0];switch(o.type){case"number":return[{str:"thenegative"}].concat(shortdesc(o,true,true));case"variable":case"const":case"void":case"absolute":return[{str:"anegation"},{str:"of"}].concat(shortdesc(o));case"negation":return[{str:"anestednegation"}];default:return[{str:"anegative"}].concat(shortdesc(o,false,true,withkids))}}break;case"NOT":if(nodive){return[{str:"atruthopp"}]}else{o=o.objs[0];switch(o.type){case"NOT":return[{str:"anestedtruthopp"}];default:return[{str:"atruthopp"},{str:"of"}].concat(shortdesc(o,false,false,true))}}break;case"relation":name={eq:"equality",neq:"inequality",lt:"strictcomparison",gt:"strictcomparison",leq:"nonstrictcomparison",geq:"nonstrictcomparison"}[o.val]||"equality";if(!name){console.log("What the heck poop is this?!",o.val,o)}return[{str:pre+name}].concat(withkids?childrendesc(o):[]);case"isinteger":return[{str:"aisinteger"}].concat(nodive?[]:[{str:"of"}].concat(shortdesc(o.objs[0])));case"DIVTEST":return[{str:"aDIVTEST"}].concat(nodive?[]:[{str:"of"}].concat(shortdesc(o.objs[0])).concat([{str:"and"}].concat(shortdesc(o.objs[1]))));case"ifelse":return[{str:"aifelse"}].concat(withkids?childrendesc(o):[]);case"root":grade=o.objs[1];if(grade.type==="number"&&((_ref1=grade.val)==="2"||_ref1==="3")){if(nodive){return[{str:pre+"root"}]}else{return[{str:(wasneg?"":"the")+grade.val+"root"}].concat([{str:"of"}].concat(shortdesc(o.objs[0])))}}else{return[{str:pre+"root"}].concat(withkids?childrendesc(o):[])}break;case"log":base=o.objs[1];if(base.type==="number"&&base.val==="10"||base.type==="const"&&base.val==="e"){if(nodive){return[{str:pre+base.val+"log"}]}else{return[{str:(wasneg?"":"the")+base.val+"log"},{str:"of"}].concat(shortdesc(o.objs[0]))}}else{return[{str:pre+"log"}].concat(withkids?childrendesc(o):[])}break;default:arr=[{str:pre+o.type}];if(o.objs&&((_ref2=o.type)==="sum"||_ref2==="product"||_ref2==="AND"||_ref2==="OR")){arr=arr.concat([{str:"with"},{number:o.objs.length},{str:childnames[o.type],colon:withkids}])}if(withkids&&o.objs){arr=arr.concat(childrendesc(o))}return arr}};youhaveentered=function(o,lang){return process([{sr:"youhaveentered"}].concat(shortdesc(o,false,false,true)),lang)};positiondesc=function(o,addr,lang){var arr,n,name,parent,target,_ref1;if(addr==null){addr=[]}if(!addr.length){throw"THE HECK, no position!"}else{parent=CATS.math.lookUp(o,addr.slice(0,-1));o=CATS.math.lookUp(o,addr);n=addr.slice(-1);name=(_ref1=childrennames[parent.type])!=null?_ref1[n]:void 0;target=name?{str:"the"+name}:parent.objs.length===1?{str:"thecontent"}:{str:"theXTH"+parent.type,order:1+parseInt(n)};arr=[{str:"youhavechosen"},target,{str:"in"}].concat(shortdesc(parent,false,false,false,true));return process(arr,lang)}};objectdesc=function(o,addr,lang){var arr;if(addr==null){addr=[]}if(addr.length){o=CATS.math.lookUp(o,addr)}arr=[{str:addr.length?"thisis":"itis"}].concat(shortdesc(o,false,false,true));console.log("ARRRRRR",arr);return process(arr,lang)};if(typeof exports==="undefined"){exportTo=this.CATS.texts}else{exportTo=exports}_ref1={positiondesc:positiondesc,objectdesc:objectdesc,youhaveentered:youhaveentered,shortdesc:shortdesc,childrendesc:childrendesc,describe:describe,youhaveentered:youhaveentered};for(k in _ref1){v=_ref1[k];exportTo[k]=v}}).call(this);