// Generated by CoffeeScript 1.6.2
(function() {
  CATS.bb.ResultView = CATS.bb.BaseView.extend({
    tagName: "div",
    localizeid: "resultview",
    category: "calc",
    className: "resultview viewbox",
    events: {
      "click .killstacktabbutton": "killMeFromRoot"
    },
    initialize: function(o) {
      this.sequences = [];
      this.others = [];
      return this.constructor.__super__.initialize.apply(this, [o]);
    },
    template: ($("#resultviewtemplate")).html(),
    render: function() {
      this.setContent(this.template);
      this.setTitle("resultheadline");
      this.setUI("sequencecontainer");
      this.ui.sequencecontainer.hide();
      return this;
    },
    clearMe: function() {
      var sview, _i, _j, _len, _len1, _ref, _ref1;

      _ref = this.sequences;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sview = _ref[_i];
        if (sview) {
          if (sview != null) {
            sview.kill();
          }
        }
      }
      _ref1 = this.others;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        sview = _ref1[_j];
        if (sview) {
          if (sview != null) {
            sview.kill();
          }
        }
      }
      return this.ui.sequencecontainer.empty();
    },
    show: function(o, errorid, errordata, noitsasimplwithdec) {
      var newsequenceview;

      this.errorid = errorid;
      this.errordata = errordata;
      this.ui.sequencecontainer.show();
      Backbone.trigger("closemodal");
      this.clearMe();
      this.sequences = [];
      newsequenceview = new CATS.bb.MasterSequenceView(o, noitsasimplwithdec ? this.errorid : void 0);
      this.listenTo(newsequenceview, "zoom", (function(sequenceview, path) {
        return this.zoom(sequenceview, path);
      }));
      this.listenTo(newsequenceview, "sequenceback", this.back);
      this.listenTo(newsequenceview, "sequencetop", this.top);
      this.listenTo(newsequenceview, "newsequenceview", this.newSequence);
      this.ui.sequencecontainer.show().append(newsequenceview.render().$el.removeClass("hidden"));
      this.updateHelpLink(($("<div class='viewsmallhelp'></div>")).prependTo(newsequenceview.$el.find(".firstresult")));
      this.zoom(newsequenceview, [], true);
      return this.childViews = [newsequenceview];
    },
    newSequence: function(view) {
      view.descriptor = view.descriptor + "-Caught";
      console.log("NEW SEQUENCE CAUGHT!", view, view.descriptor);
      this.others.push(view);
      return this.ui.sequencecontainer.append(view.el);
    },
    zoom: function(sequenceview, path, master) {
      if (path == null) {
        path = [];
      }
      if (!(this.sequences.length && this.sequences[this.sequences.length - 1].descriptor === sequenceview.descriptor)) {
        console.log("Zoooooooming", sequenceview.descriptor, path, master);
        if (this.sequences.length) {
          this.sequences[this.sequences.length - 1].$el.addClass("sequencehiddenleft");
        }
        this.sequences.push(sequenceview);
        if (!master) {
          return sequenceview.$el.removeClass("sequencehiddenleft").removeClass("sequencehiddenright").scrollTop(0);
        }
      } else {
        return console.log("Dooooubleclick, haha, i caught you! :)");
      }
    },
    back: function() {
      if (this.sequences.length > 1) {
        this.sequences[this.sequences.length - 1].$el.addClass("sequencehiddenright");
        this.sequences[this.sequences.length - 2].$el.removeClass("sequencehiddenleft");
        return this.sequences.pop();
      }
    },
    top: function() {
      var _results;

      _results = [];
      while (this.sequences.length > 1 && !this.sequences[this.sequences.length - 1].master) {
        this.sequences[this.sequences.length - 1].$el.addClass("sequencehiddenright");
        this.sequences[this.sequences.length - 2].$el.removeClass("sequencehiddenleft");
        _results.push(this.sequences.pop());
      }
      return _results;
    }
  });

}).call(this);
