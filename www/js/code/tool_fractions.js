(function(){var And,Eq,Err,FALSE,Frac,Fraction,Geq,Gt,Leq,Lt,Neg,Neq,Not,Num,OK,Or,Pow,Power,Prod,Product,Sum,TRUE,UNDEFINED,biFracProdToBiProdFrac,biProdFracToBiFracProd,collapseNegOneDenom,collapseNegationsInSumsInFrac,commonBaseNumFacPairer,commonNumFacPairer,commonPosBaseNumFacPairer,decimalifyFracFacs,deepcopy,divideByOne,divideCheck,doubleNegFacPairer,elimFacWithFracFac,eliminateCommonInnerFacsInFrac,eliminateFromFrac,eliminateFromSumsInFrac,eliminateInnerNumFacsInSumsInFrac,eliminateMirrorSumFacsFromFrac,eliminateNegMirrorFacsFromFrac,eliminateSameBasePowsInSumsInFrac,exportTo,extractFacsFromFrac,findFracFacPairs,five,flattenFracDenom,flattenFracNumer,flattenFracNumerDenom,four,fracFacCombos,fracFacOptPairs,fracPickChoices,funcs,k,makeCheck,makeFracPickChoices,mirrorNegFacPairer,mirrorSumFacPairer,mixin,multFacsIntoFrac,one,oneDenomFracToNumer,oneToSameNumerDenomFrac,printObj,prolongFraction,prolongNumericFraction,sameNumerDenomFracToOne,sameSpiritNumerDenomFracToOne,sumNumerFracToSum,three,two,v,x,y,z,zero,zeroDenomFracToUndef,_ref,__indexOf=[].indexOf||function(item){for(var i=0,l=this.length;i<l;i++){if(i in this&&this[i]===item)return i}return-1};_ref=typeof require==="undefined"?this.CATS.math.toolhelpers:require("./toolhelpers"),UNDEFINED=_ref.UNDEFINED,deepcopy=_ref.deepcopy,mixin=_ref.mixin,Prod=_ref.Prod,Frac=_ref.Frac,Pow=_ref.Pow,Eq=_ref.Eq,Leq=_ref.Leq,Gt=_ref.Gt,Geq=_ref.Geq,Lt=_ref.Lt,Neq=_ref.Neq,four=_ref.four,five=_ref.five,And=_ref.And,Or=_ref.Or,Not=_ref.Not,TRUE=_ref.TRUE,FALSE=_ref.FALSE,makeCheck=_ref.makeCheck,x=_ref.x,y=_ref.y,z=_ref.z,Neg=_ref.Neg,Product=_ref.Product,Sum=_ref.Sum,Power=_ref.Power,Fraction=_ref.Fraction,Num=_ref.Num,zero=_ref.zero,one=_ref.one,two=_ref.two,three=_ref.three,Err=_ref.Err,OK=_ref.OK,printObj=_ref.printObj;makeFracPickChoices=function(allownone){return{questions:[{instruction:"choosenumerfactactic",options:function(o){return(allownone?["none"]:[]).concat(o.deps.getFacOptions(o.target.objs[0]))}},{instruction:"choosedenomfactactic",options:function(o){return(allownone?["none"]:[]).concat(o.deps.getFacOptions(o.target.objs[1]))}}]}};fracPickChoices={questions:[{instruction:"choosenumerfactactic",options:function(o){return o.deps.getFacOptions(o.target.objs[0],false,false,true)}},{instruction:"choosedenomfactactic",options:function(o){return o.deps.getFacOptions(o.target.objs[1],false,false,true)}}]};fracFacOptPairs=function(_arg){var allowdenom,denom,denomopt,deps,nonegdig,numer,numeropt,pairs,_i,_j,_len,_len1,_ref1,_ref2,_ref3,_ref4;deps=_arg.deps,allowdenom=_arg.allowdenom,nonegdig=_arg.nonegdig,_ref1=_arg.target,_ref2=_ref1.objs,numer=_ref2[0],denom=_ref2[1];pairs=[];_ref3=deps.getFacOptions(numer,allowdenom,nonegdig);for(_i=0,_len=_ref3.length;_i<_len;_i++){numeropt=_ref3[_i];_ref4=deps.getFacOptions(denom,allowdenom,nonegdig);for(_j=0,_len1=_ref4.length;_j<_len1;_j++){denomopt=_ref4[_j];pairs.push([numeropt,denomopt])}}return pairs};fracFacCombos=function(o){var optpair,_i,_len,_ref1,_results;_ref1=o.deps.fracFacOptPairs(o);_results=[];for(_i=0,_len=_ref1.length;_i<_len;_i++){optpair=_ref1[_i];_results.push([optpair,o.deps.getFacs(o.target.objs[0],optpair[0]),o.deps.getFacs(o.target.objs[1],optpair[1])])}return _results};findFracFacPairs=function(o){var data,denomfac,denomfacpos,denomfacs,kind,numfac,numfacpos,numfacs,optpair,res,ret,_i,_j,_k,_len,_len1,_len2,_ref1,_ref2,_ref3;ret={};_ref1=o.deps.fracFacCombos(o);for(_i=0,_len=_ref1.length;_i<_len;_i++){_ref2=_ref1[_i],optpair=_ref2[0],numfacs=_ref2[1],denomfacs=_ref2[2];for(numfacpos=_j=0,_len1=numfacs.length;_j<_len1;numfacpos=++_j){numfac=numfacs[numfacpos];for(denomfacpos=_k=0,_len2=denomfacs.length;_k<_len2;denomfacpos=++_k){denomfac=denomfacs[denomfacpos];if(!(res=o.pairer(mixin({obj1:numfac,obj2:denomfac},o)))){continue}_ref3=Array.isArray(res)?res:[res],kind=_ref3[0],data=_ref3[1];ret[kind]=(ret[kind]||[]).concat([[optpair,numfacpos,denomfacpos].concat(data?[data]:[])])}}}return ret};commonNumFacPairer=function(_arg){var contained,deps,fac,obj1,obj2;obj1=_arg.obj1,obj2=_arg.obj2,deps=_arg.deps;fac=deps.findLargestCommonDivisor(obj1,obj2);contained=deps.equal(obj1,fac)||deps.equal(obj2,fac);if(deps.equal(fac,one)||deps.equal(fac,zero)){return false}else{return[contained?"contained":"inner",fac]}};commonBaseNumFacPairer=function(_arg){var deps,first,obj1,obj2,second;obj1=_arg.obj1,obj2=_arg.obj2,deps=_arg.deps;first=obj1.type==="power"?obj1.objs[0]:obj1;second=obj2.type==="power"?obj2.objs[0]:obj2;return deps.commonNumFacPairer({obj1:first,obj2:second,deps:deps})};commonPosBaseNumFacPairer=function(_arg){var deps,first,obj1,obj2,second;obj1=_arg.obj1,obj2=_arg.obj2,deps=_arg.deps;first=obj1.type==="power"?obj1.objs[0]:obj1;second=obj2.type==="power"?obj2.objs[0]:obj2;if(first.type==="negation"||second.type==="negation"){return false}else{return deps.commonNumFacPairer({obj1:first,obj2:second,deps:deps})}};mirrorNegFacPairer=function(_arg){var deps,obj1,obj2;obj1=_arg.obj1,obj2=_arg.obj2,deps=_arg.deps;if((deps.equal(obj1,Neg(obj2))||deps.equal(obj2,Neg(obj1)))&&!deps.equal(obj1,one)&&!deps.equal(obj2,one)){return["mirror",obj1.type==="negation"?"numer":"denom"]}else{return false}};doubleNegFacPairer=function(_arg){var deps,obj1,obj2;obj1=_arg.obj1,obj2=_arg.obj2,deps=_arg.deps;if(obj1.type==="negation"&&obj2.type==="negation"){return["doublenegs"]}else{return false}};mirrorSumFacPairer=function(o){if(o.deps.isMirrorSums(o)){return["mirrorsums"]}else{return false}};divideCheck=function(_arg){var deps,found,minrest,obj1,obj2,todivide,val1,val2;obj1=_arg.obj1,obj2=_arg.obj2,deps=_arg.deps;if(obj1.type!=="number"||obj2.type!=="number"){console.log("BOGUSCALL",obj1,obj2);throw"SADLKASD"}val1=parseFloat(obj1.val);val2=parseFloat(obj2.val);todivide=val1;found=0;minrest=0;while(found<100&&todivide/val2===Math.floor(todivide/val2)){todivide=todivide/val2;found++;if(found===1){minrest=todivide}}return{minrest:Num(minrest||todivide),maxrest:Num(todivide),divider:obj2,divided:obj1,found:found}};oneDenomFracToNumer={info:{name:"oneDenomFracToNumer",effect:"simplifying",opposite:"divideByOne",example:"x/1",tags:["fraction","number1","remove"],lesson:"fraction101"},prints:{errors:["denommustbeone"]},target:{type:"fraction",validate:function(_arg){var denom,deps,numer,_ref1,_ref2;deps=_arg.deps,_ref1=_arg.target,_ref2=_ref1.objs,numer=_ref2[0],denom=_ref2[1];if(!deps.equal(denom,one)){return Err("denommustbeone",[1])}else{return OK}}},perform:function(_arg){var numer;numer=_arg.target.objs[0];return{result:numer,beforemarks:[[1]]}}};sameNumerDenomFracToOne={info:{name:"sameNumerDenomFracToOne",effect:"simplifying",opposite:"oneToSameNumerDenomFrac",example:"x/x",tags:["fraction","number1","collapse"],lesson:"fraction101"},prints:{errors:["numerdenommustbesame"]},target:{type:"fraction",validate:function(_arg){var deps,target;target=_arg.target,deps=_arg.deps;if(!deps.equal(target.objs[0],target.objs[1])){return Err("numerdenommustbesame")}else{return OK}}},perform:function(){return{result:one,beforemarks:[[0],[1]]}}};biFracProdToBiProdFrac={info:{name:"biFracProdToBiProdFrac",effect:"simplifying",opposite:"biProdFracToBiFracProd",example:"(a/b)*(c/d)",tags:["fraction","product","fractionfactor"],lesson:"fraction101"},prints:{errors:["mustbebiprod","bothfacsmustbefracs"]},target:{type:"product",validate:function(_arg){var facs;facs=_arg.target.objs;if(facs.length!==2){return Err("mustbebiprod")}else if(facs[0].type!=="fraction"){return Err("bothfacsmustbefracs",[0])}else if(facs[1].type!=="fraction"){return Err("bothfacsmustbefracs",[1])}else{return OK}}},perform:function(_arg){var frac1,frac1denom,frac1numer,frac2,frac2denom,frac2numer,_ref1,_ref2,_ref3;_ref1=_arg.target.objs,frac1=_ref1[0],frac2=_ref1[1];_ref2=frac1.objs,frac1numer=_ref2[0],frac1denom=_ref2[1];_ref3=frac2.objs,frac2numer=_ref3[0],frac2denom=_ref3[1];return{result:Fraction(Product(frac1numer,frac2numer),Product(frac1denom,frac2denom))}}};zeroDenomFracToUndef={info:{name:"zeroDenomFracToUndef",effect:"integrity",example:"x/0",returns:"undefined",tags:["number0","fraction","undefinedval","integritycheck"],lesson:"fraction101"},prints:{errors:["denommustbezero"]},target:{type:"fraction",validate:function(_arg){var denom,deps,numer,_ref1,_ref2;deps=_arg.deps,_ref1=_arg.target,_ref2=_ref1.objs,numer=_ref2[0],denom=_ref2[1];if(!deps.equal(denom,zero)){return Err("denommustbezero",[1])}else{return OK}}},perform:function(o){return{result:UNDEFINED,beforemarks:[[1]],undef:true}}};divideByOne={info:{name:"divideByOne",effect:"complicating",opposite:"oneDenomFracToNumer",example:"x",tags:["number1","fraction","introduce"],lesson:"fraction101"},target:"math",perform:function(_arg){var target;target=_arg.target;return{result:Fraction(target,Num(1)),aftermarks:[[1]]}}};oneToSameNumerDenomFrac={info:{name:"oneToSameNumerDenomFrac",effect:"complicating",opposite:"sameNumerDenomFracToOne",example:{str:"1",argument:"x"},tags:["fraction","number1","split"],lesson:"fraction101"},prints:{instructions:["enternonzero"]},target:"one",argument:{instruction:"enternonzero"},perform:function(_arg){var argument;argument=_arg.argument;return{result:Fraction(argument,argument),aftermarks:[[0],[1]],condition:Neq(argument,zero)}}};biProdFracToBiFracProd={info:{name:"biProdFracToBiFracProd",opposite:"biFracProdToBiProdFrac",effect:"complicating",example:"(a*b)/(c*d)",tags:["fraction","product","fractionfactor"],lesson:"fraction101"},prints:{errors:["numermustbebiprod","denommustbebiprod"]},target:{type:"fraction",validate:function(_arg){var denom,numer,_ref1;_ref1=_arg.target.objs,numer=_ref1[0],denom=_ref1[1];if(numer.type!=="product"||numer.objs.length!==2){return Err("numermustbebiprod",[0])}else if(denom.type!=="product"||denom.objs.length!==2){return Err("denommustbebiprod",[1])}else{return OK}}},perform:function(_arg){var denomfac1,denomfac2,numerfac1,numerfac2,_ref1,_ref2,_ref3,_ref4,_ref5;_ref1=_arg.target.objs,_ref2=_ref1[0],_ref3=_ref2.objs,numerfac1=_ref3[0],numerfac2=_ref3[1],_ref4=_ref1[1],_ref5=_ref4.objs,denomfac1=_ref5[0],denomfac2=_ref5[1];return{result:Product(Fraction(numerfac1,denomfac1),Fraction(numerfac2,denomfac2))}}};sameSpiritNumerDenomFracToOne={info:{name:"sameSpiritNumerDenomFracToOne",effect:"simplifying",example:"(xy(-z)/(z(-x)y)",uses:["makeEqual","sameNumerDenomFracToOne"],tags:["number1","fraction","collapse"],lesson:"fraction102"},prints:{errors:["mustbesamespiritnumerdenom"],steps:["firstwemakethemidentical","thenwecollapsetoone"]},target:{type:"fraction",validate:function(_arg){var deps,obj1,obj2,_ref1,_ref2;deps=_arg.deps,_ref1=_arg.target,_ref2=_ref1.objs,obj1=_ref2[0],obj2=_ref2[1];if(deps.isKindredSpirits({obj1:obj1,obj2:obj2,deps:deps}).result){return OK}else{return Err("mustbesamespiritnumerdenom")}}},perform:function(o){o["do"]("makeEqual","firstwemakethemidentical",{hunt:[[0],[1]]});return o["do"]("sameNumerDenomFracToOne","thenwecollapsetoone")}};multFacsIntoFrac={info:{name:"multFacsIntoFrac",effect:"simplifying",example:{str:"x*y*(2/3)*z",selection:[[2],[0,3]]},uses:["mergeFracFacs","splitFacsToProduct","divideByOne","biFracProdToBiProdFrac","purgeOneFacs","absorbProductFacs","moveNegFromFracToFloorFac"],tags:["fraction","fractionfactor","product"],opposite:"extractFacsFromFrac",circle:["moveNegFromFracToFloorFac"],lesson:"fraction101"},prints:{steps:["groupselectedfacs","turnchoicetofrac","mergefracs","removeonedenom","flatteningprod"]},target:"product",selection:{makefirstunique:true,questions:[{max:1,filter:function(o){if(o.item.type==="fraction"||o.item.type==="negation"&&o.item.objs[0].type==="fraction"){return OK}else{return Err("SELfracornegfrac")}}},{}]},perform:function(o){var facs,fracnumerwasone,fracpos,fractoright,numerlength,path,pos,preaddr,sels;sels=o.selection;o.beforemark(function(){var _i,_len,_ref1,_results;_ref1=sels[0].concat(sels[1]).sort();_results=[];for(_i=0,_len=_ref1.length;_i<_len;_i++){pos=_ref1[_i];_results.push([pos])}return _results}());fracpos=o.selection[0][0];numerlength=o.deps.getFacs(o.target.objs[fracpos].objs[0]).length;facs=sels[1];fractoright=fracpos>facs[0];fracnumerwasone=o.deps.equal(o.target.objs[fracpos].objs[0],one);o.doIf("moveNegFromFracToFloorFac","moveneg",{aim:[fracpos],choices:["numer","self"],selection:[[0]]});if(facs.length>1){o["do"]("splitFacsToProduct","groupselectedfacs",{selection:[facs]});fracpos-=facs.slice(1).filter(function(pos){return pos<fracpos}).length}o["do"]("divideByOne","turnchoicetofrac",{aim:[facs[0]]});if(o.target.objs.length>2){o["do"]("mergeFracFacs","mergefracs",{selection:[[fracpos,facs[0]].sort()]});fracpos=[[fracpos,facs[0]].sort()][0][0];preaddr=[fracpos]}else{o["do"]("biFracProdToBiProdFrac","mergefracs");fracpos=0;preaddr=[]}o["do"]("purgeOneFacs","removeonedenom",{aim:preaddr.concat(1),selection:[[fractoright?0:1]]});if(fracnumerwasone){o["try"]("purgeOneFacs","removeoneinnumer",{aim:preaddr.concat(0)})}else{if(fractoright&&numerlength>1||facs.length>1&&!fractoright){o["do"]("absorbProductFacs","flatteningprod",{aim:preaddr.concat(0),selection:[[1]]})}if(fractoright&&facs.length>1||numerlength>1&&!fractoright){o["do"]("absorbProductFacs","flatteningprod",{aim:preaddr.concat(0),selection:[[0]]})}}path=o.target.type==="fraction"?[0]:[fracpos,0];return o.aftermark(o.target.type==="fraction"&&o.target.objs[0].type!=="product"?[0]:function(){var _i,_ref1,_results;_results=[];for(pos=_i=0,_ref1=sels[1].length;0<=_ref1?_i<_ref1:_i>_ref1;pos=0<=_ref1?++_i:--_i){_results.push(path.concat([pos+(fractoright?0:numerlength)]))}return _results}())}};flattenFracNumer={info:{name:"flattenFracNumer",effect:"simplifying",example:"(x/y)/z",uses:["extractFacsFromFrac","biFracProdToBiProdFrac","purgeOneFacs","moveNegFromFracToFloorFac"],tags:["fraction","fractionnumerator","flatten"],lesson:"fraction102"},prints:{errors:["numermustbefracornegfrac"],steps:["extractnumerfrac","mergeitback","removenumerone","firstmovenumernegintonumernumer"]},target:{type:"fraction",validate:function(_arg){var numer;numer=_arg.target.objs[0];if(numer.type==="fraction"||numer.type==="negation"&&numer.objs[0].type==="fraction"){return OK}else{return Err("numermustbefracornegfrac",[0])}}},perform:function(o){if(o.target.objs[0].type==="negation"){o["do"]("moveNegFromFracToFloorFac","firstmovenumernegintonumernumer",{aim:[0],choices:["numer","self"],selection:[[0]]});o.beforemark([[0,0,1]])}else{o.beforemark([[0,1]])}o["do"]("extractFacsFromFrac","extractnumerfrac",{selection:[[0],[]],direction:"left",choices:["self","self"]});o["do"]("biFracProdToBiProdFrac","mergeitback");o["do"]("purgeOneFacs","removenumerone",{aim:[0],selection:[[1]]});return o.aftermark([[1,0]])}};flattenFracDenom={info:{name:"flattenFracDenom",effect:"simplifying",example:"x/(y/z)",uses:["prolongFraction","moveNegFromFracToFloorFac","elimFacWithFracFac","oneDenomFracToNumer","purgeOneFacs"],tags:["fraction","fractiondenominator","flatten"],lesson:"fraction102"},prints:{errors:["denommustbefracornegfrac"],steps:["prolongwithdenomdenom","multintodenomfrac","eliminateindenom","firstmovedenomnegintodenomnumer","cleanupnumer"]},target:{type:"fraction",validate:function(_arg){var denom,numer,_ref1;_ref1=_arg.target.objs,numer=_ref1[0],denom=_ref1[1];if(denom.type==="fraction"||denom.type==="negation"&&denom.objs[0].type==="fraction"){return OK}else{return Err("denommustbefracornegfrac",[1])}}},perform:function(o){var denomnumerisone,denomnumerlength;if(o.target.objs[1].type==="negation"){o.beforemark([[1,0,1]]);o["do"]("moveNegFromFracToFloorFac","firstmovedenomnegintodenomnumer",{aim:[1],choices:["numer","self"],selection:[[0]]})}else{o.beforemark([[1,1]])}denomnumerlength=o.deps.getFacs(o.target.objs[1].objs[0]).length;denomnumerisone=o.deps.equal(o.target.objs[1].objs[0],one);o["do"]("prolongFraction","prolongwithdenomdenom",{direction:"right",argument:o.target.objs[1].objs[1]});o["do"]("elimFacWithFracFac","multinandelim",{aim:[1],selection:[[1],[0],[0]],choices:["self"]});o["try"]("oneDenomFracToNumer","cleanupdenom");o["try"]("purgeOneFacs","cleanupnumer");o["try"]("purgeOneFacs","cleanupnumer",{aim:[0]});return o.aftermark(o.target.type==="fraction"?[[0,1]]:[[1]])}};flattenFracNumerDenom={info:{name:"flattenFracNumerDenom",effect:"simplifying",example:"(x/y)/(2/3)",uses:["flattenFracDenom","multFacsIntoFrac","flattenFracNumer","moveNegFromFracToFloorFac"],tags:["fraction","fractionnumerator","fractiondenominator","flatten"],lesson:"fraction102"},prints:{errors:["denommustbeposnegfrac","numermustbeposnegfrac"],steps:["firstmovenumernegintonumernumer","firstflattendenom","mergefacintonumerfrac","thenflattennumer"]},target:{type:"fraction",validate:function(_arg){var denom,deps,numer,_ref1,_ref2;deps=_arg.deps,_ref1=_arg.target,_ref2=_ref1.objs,numer=_ref2[0],denom=_ref2[1];if(deps.digIfNeg(denom).type!=="fraction"){return Err("denommustbeposnegfrac",[1])}else if(deps.digIfNeg(numer).type!=="fraction"){return Err("numermustbeposnegfrac",[0])}else{return OK}}},perform:function(o){if(o.target.objs[0].type==="negation"){o["do"]("moveNegFromFracToFloorFac","firstmovenumernegintonumernumer",{aim:[0],choices:["numer","self"],selection:[[0]]})}o["do"]("flattenFracDenom","firstflattendenom");if(o.target.type==="fraction"){o["do"]("multFacsIntoFrac","mergefacintonumerfrac",{aim:[0],selection:[[0],[1]]});return o["do"]("flattenFracNumer","thenflattennumer")}else{return o["do"]("multFacsIntoFrac","mergefacintoremainingfrac",{selection:[[0],[1]]})}}};eliminateFromFrac={info:{name:"eliminateFromFrac",effect:"simplifying",example:{str:"(2*x*y)/(x*z)",selection:[[1],[0]],choices:["facs","facs"]},uses:["extractFacsFromFrac","makeEqual","sameNumerDenomFracToOne","purgeOneFacs"],tags:["fraction","remove"],lesson:"fraction102"},prints:{instructions:["choosedenomfactactic","choosenumerfactactic"],errors:["numerdenomhavenocommonfacs","mustselectsimilarfacs"],steps:["extractchosenfacs","makeextractedbitsidentical","collapseextractedfrac","removeonefac","fixonedenom"]},target:"fraction",choices:fracPickChoices,selection:{questions:function(_arg){var choices,deps,floor,floornum,target,_i,_len,_ref1,_results;deps=_arg.deps,target=_arg.target,choices=_arg.choices;_ref1=target.objs;_results=[];for(floornum=_i=0,_len=_ref1.length;_i<_len;floornum=++_i){floor=_ref1[floornum];_results.push({options:deps.getFacs(floor,choices!=null?choices[floornum]:void 0)})}return _results}},validate:function(o){var obj1,obj2,_ref1,_ref2;obj1=o.deps.collapseStubList(Prod(o.deps.getFacs(o.target.objs[0],(_ref1=o.choices)!=null?_ref1[0]:void 0).filter(function(i,p){return __indexOf.call(o.selection[0],p)>=0})));obj2=o.deps.collapseStubList(Prod(o.deps.getFacs(o.target.objs[1],(_ref2=o.choices)!=null?_ref2[1]:void 0).filter(function(i,p){return __indexOf.call(o.selection[1],p)>=0})));if(!o.deps.isKindredSpirits(mixin({obj1:obj1,obj2:obj2},o)).result){return Err("mustselectsimilarfacs")}else{return OK}},auto:function(o){var choices,denomfac,denomfacpos,denomfacs,denomsel,numerfac,numerfacpos,numerfacs,numersel,used,_i,_j,_k,_len,_len1,_len2,_ref1,_ref2;_ref1=o.deps.fracFacCombos(o);for(_i=0,_len=_ref1.length;_i<_len;_i++){_ref2=_ref1[_i],choices=_ref2[0],numerfacs=_ref2[1],denomfacs=_ref2[2];numersel=[];denomsel=[];for(numerfacpos=_j=0,_len1=numerfacs.length;_j<_len1;numerfacpos=++_j){numerfac=numerfacs[numerfacpos];if(!!o.deps.equal(numerfac,one)){continue}used=false;for(denomfacpos=_k=0,_len2=denomfacs.length;_k<_len2;denomfacpos=++_k){denomfac=denomfacs[denomfacpos];if(!(used||__indexOf.call(denomsel,denomfacpos)>=0)){if(o.deps.isKindredSpirits(mixin({obj1:numerfac,obj2:denomfac},o)).result===true){used=true;numersel.push(numerfacpos);denomsel.push(denomfacpos)}}}}if(numersel.length){return{choices:choices,selection:[numersel,denomsel.sort()]}}}return Err("numerdenomhavenocommonfacs")},perform:function(o){var extractdir,floor,newpos,sel,_i,_j,_len,_len1,_ref1,_ref2,_ref3;_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.selection[floor];for(_j=0,_len1=_ref2.length;_j<_len1;_j++){sel=_ref2[_j];o.beforemark([floor].concat(o.deps.facPath(((_ref3=o.choices)!=null?_ref3[floor]:void 0)||"facs",sel)))}}extractdir=o.selection[0][0]===0||o.selection[1][0]===0?"left":"right";newpos=extractdir==="left"?0:1;o["do"]("extractFacsFromFrac","extractchosenfacs",{direction:extractdir});if(!o.deps.equal(o.target.objs[newpos].objs[0],o.target.objs[newpos].objs[1])){o["do"]("makeEqual","makeextractedbitsidentical",{aim:[newpos],hunt:[[0],[1]]})}o["do"]("sameNumerDenomFracToOne","collapseextractedfrac",{aim:[newpos]});o["do"]("purgeOneFacs","removeonefac",{selection:[[newpos]]});return o}};eliminateCommonInnerFacsInFrac={info:{name:"eliminateCommonInnerFacsInFrac",effect:"simplifying",example:{str:"24/8",argument:Num(8),choices:["self","self"],selection:[[0],[0]]},uses:["numToProd","absorbProductFacs","negToNegOneFacProd","eliminateFromFrac","collapseNegOneFac"],tags:["fraction","remove","division","integer"],lesson:"fraction102"},prints:{errors:["numeranddenomsharenoinnernumfacs","nocommonfacs","chosennumshavenocommonfacs","notacommonfac"],instructions:["choosenumerfactactic","choosedenomfactactic","entercommoninnerfac"],steps:["splitnumtofacs","freenumfromneg","flattenresafternegfree","flattenresaftermultsplit","eliminatefreedfacs","collapsethefreednegone"]},target:"fraction",choices:fracPickChoices,selection:{max:1,filter:"numeric",questions:[{from:function(o){var _ref1;return o.deps.getFacs(o.target.objs[0],(_ref1=o.choices)!=null?_ref1[0]:void 0)}},{from:function(o){var _ref1;return o.deps.getFacs(o.target.objs[1],(_ref1=o.choices)!=null?_ref1[1]:void 0)}}],validate:function(o){var first,second,_ref1,_ref2;first=o.deps.getFacs(o.target.objs[0],(_ref1=o.choices)!=null?_ref1[0]:void 0)[o.selection[0][0]];second=o.deps.getFacs(o.target.objs[1],(_ref2=o.choices)!=null?_ref2[1]:void 0)[o.selection[1][0]];if(!o.deps.equal(one,o.deps.findLargestCommonDivisor(first,second))){return OK}else{return Err("chosennumshavenocommonfacs")}}},argument:{instruction:"entercommoninnerfac",type:"number",validate:function(o){var argfac,common,err,first,second,_i,_len,_ref1,_ref2,_ref3;first=o.deps.getFacs(o.target.objs[0],(_ref1=o.choices)!=null?_ref1[0]:void 0)[o.selection[0][0]];second=o.deps.getFacs(o.target.objs[1],(_ref2=o.choices)!=null?_ref2[1]:void 0)[o.selection[1][0]];common=o.deps.findCommonNumberFacs(first,second);err=false;_ref3=o.deps.factoriseNumber(o.argument);for(_i=0,_len=_ref3.length;_i<_len;_i++){argfac=_ref3[_i];if(!common.filter(function(i){return i.val===argfac.val}).length){return Err("notacommonfac")}}return OK}},auto:function(o){var chosen,res,_ref1,_ref2;res=o.deps.findFracFacPairs(mixin({pairer:o.deps.commonNumFacPairer},o));chosen=((_ref1=res.contained)!=null?_ref1[0]:void 0)||((_ref2=res.inner)!=null?_ref2[0]:void 0);if(chosen){return{argument:chosen[3],selection:[[chosen[1]],[chosen[2]]],choices:chosen[0]}}else{return Err("numeranddenomsharenoinnernumfacs")}},perform:function(o){var argval,choice,choices,facval,floor,missingfacval,mustflatten,path,prodified,prodnegs,sel,selfnegs,sels,_i,_j,_len,_len1,_ref1,_ref2,_ref3,_ref4;argval=o.deps.numberValue(o.argument);sels=o.selection;choices=o.choices||[];prodnegs=[];selfnegs=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];choice=choices[floor];sel=sels[floor][0];prodified=false;path=[floor].concat(o.deps.facPath(choice,sel));o.beforemark(path);if(o.deps.lookUp(o.target,path).type==="negation"){mustflatten=o.deps.lookUp(o.target,path.slice(0,-1)).type==="product";o["do"]("negToNegOneFacProd","freenumfromneg",{aim:path,direction:"right"});selfnegs[floor]=path.slice(-1)[0]+1;prodified=true;if(choice==="negchild"){choices[floor]="negchildfacs"}if(mustflatten){o["do"]("absorbProductFacs","flattenresafternegfree",{aim:path.slice(0,-1),selection:[path.slice(-1)]})}if(path.length===1){path=[floor,0]}}mustflatten=o.deps.lookUp(o.target,path.slice(0,-1)).type==="product";facval=o.deps.numberValue(o.deps.lookUp(o.target,path));if(facval!==argval){prodified=true;mustflatten=o.deps.lookUp(o.target,path.slice(0,-1)).type==="product";missingfacval=facval/argval;o["do"]("numToProd","splitnumtofacs",{aim:path,argument:Product(o.argument,Num(missingfacval))});o.aftermark([floor].concat(mustflatten?sel:[]));if(mustflatten){o["do"]("absorbProductFacs","flattenresaftermultsplit",{aim:path.slice(0,-1),selection:[path.slice(-1)]})}}if(prodified){choices[floor]=function(){switch(choice){case"self":return"facs";case"powbase":return"facs";case"negchild":return"negchildfacs";case"numerself":return"numerfacs";case"denomself":return"denomfacs";case"negchildnumerself":return"negchildnumerfacs";case"negchilddenomself":return"negchilddenomfacs";default:return choice}}()}if(o.target.objs[floor].type==="negation"){prodnegs[floor]=((_ref2=o.target.objs[floor].objs[0].objs)!=null?_ref2.length:void 0)-1||0}}o["do"]("eliminateFromFrac","eliminatefreedfacs",{selection:sels,choices:choices});if(o.target.type==="fraction"){_ref3=[0,1];for(_j=0,_len1=_ref3.length;_j<_len1;_j++){floor=_ref3[_j];if(((_ref4=o.target.objs)!=null?_ref4[floor].type:void 0)==="product"){if(prodnegs[floor]!==void 0){o["try"]("collapseNegOneFac","collapsethefreednegone",{aim:[floor]})}else if(selfnegs[floor]!==void 0){o["try"]("collapseNegOneFac","collapsethefreednegone",{aim:[floor]})}}}}o["try"]("collapseNegOneFac","collapsethefreednegone");return o}};eliminateNegMirrorFacsFromFrac={info:{name:"eliminateNegMirrorFacsFromFrac",effect:"simplifying",example:{str:"(z*-x)/(x*2)",selection:[[1],[0]],choices:["facs","facs"]},uses:["negToNegOneFacProd","absorbProductFacs","eliminateFromFrac"],tags:["fraction","remove"],lesson:"fraction102"},prints:{errors:["chosenfacsarenotnegmirrors","numeranddenomhavenonegmirrors"],steps:["freenumfromneg","flattenresafternegfree","eliminatefreedfacs"]},target:"fraction",choices:fracPickChoices,selection:{max:1,questions:[{from:function(o){var _ref1;return o.deps.getFacs(o.target.objs[0],(_ref1=o.choices)!=null?_ref1[0]:void 0)}},{from:function(o){var _ref1;return o.deps.getFacs(o.target.objs[1],(_ref1=o.choices)!=null?_ref1[1]:void 0)}}]},validate:function(o){var choices,denom,deps,first,numer,second,selection,_ref1,_ref2;deps=o.deps,selection=o.selection,choices=o.choices,_ref1=o.target,_ref2=_ref1.objs,numer=_ref2[0],denom=_ref2[1];first=deps.getFacs(numer,choices[0])[selection[0][0]];second=deps.getFacs(denom,choices[1])[selection[1][0]];if(deps.equal(first,Neg(second))||deps.equal(second,Neg(first))){return OK}else{return Err("chosenfacsarenotnegmirrors")}},auto:function(o){var chosen,res,_ref1;res=o.deps.findFracFacPairs(mixin({pairer:o.deps.mirrorNegFacPairer},o));chosen=(_ref1=res.mirror)!=null?_ref1[0]:void 0;if(chosen){return{selection:[[chosen[1]],[chosen[2]]],choices:chosen[0]}}else{return Err("numeranddenomhavenonegmirrors")}},perform:function(o){var choice,choices,floor,path,sel,sels,_i,_len,_ref1;sels=o.selection;choices=o.choices||[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];choice=choices[floor];sel=sels[floor][0];path=[floor].concat(o.deps.facPath(choice,sel));o.beforemark(path);if(o.deps.lookUp(o.target,path).type==="negation"){o["do"]("negToNegOneFacProd","freenumfromneg",{aim:path,direction:"right"});if(o.deps.lookUp(o.target,path.slice(0,-1)).type==="product"){o["do"]("absorbProductFacs","flattenresafternegfree",{aim:path.slice(0,-1),selection:[path.slice(-1)]})}choices[floor]=o.deps.toProdPath(choice)}}return o["do"]("eliminateFromFrac","eliminatefreedfacs",{selection:sels,choices:choices})}};collapseNegOneDenom={info:{name:"collapseNegOneDenom",effect:"simplifying",example:"x/-1",uses:["prolongFraction","twoNegOneFacProdToOne","oneDenomFracToNumer","negOneFacBiProdToNeg"],tags:["fraction","neg1","collapse"],lesson:"fraction102"},prints:{errors:["denommustbenegone"],steps:["firstweprolongwithnegone","collapsenegsindenom","finallyremoveonedenom","andcollapsenegovernumer"]},target:{type:"fraction",validate:function(o){if(o.deps.equal(o.target.objs[1],Neg(one))){return OK}else{return Err("denommustbenegone")}}},perform:function(o){o["do"]("prolongFraction","firstweprolongwithnegone",{direction:"right",argument:Neg(one)});o["do"]("twoNegOneFacProdToOne","collapsenegsindenom",{aim:[1]});o["do"]("oneDenomFracToNumer","finallyremoveonedenom");o["do"]("negOneFacBiProdToNeg","andcollapsenegovernumer",{selection:[[1],[0]]});return o.beforemark([[1]])}};eliminateMirrorSumFacsFromFrac={info:{name:"eliminateMirrorSumFacsFromFrac",effect:"simplifying",returns:"shrunkfraction",example:{str:"(x-y)/(y-x)",selection:[[0],[0]],choices:["self","self"]},uses:["addTwoNegOneFacsToExpression","distributeFacs","collapseTwoNegFacs","absorbProductFacs","negOneFacBiProdToNeg","collapseNegProdWithNegFac","eliminateFromFrac"],tags:["fraction","remove"],lesson:"fraction102"},prints:{errors:["mustselectnegmirrorsums","nomirrorsumstoeliminate"],instructions:["pickmirrorsuminnumer","pickmirrorsumindenom","choosenumerfactactic","choosedenomfactactic"],steps:["addnegonestouseformirroring","distributeoneofthenegonesintothesum","negbecomespos","negifyterm","collapsewithinnerneg","integrateresultintonumer","nowweeliminatethesums"]},choices:fracPickChoices,target:"fraction",selection:{max:1,filter:"sum",questions:[{instruction:"pickmirrorsuminnumer",from:function(o){return o.deps.getFacs(o.target.objs[o.qnum],o.choices[o.qnum])}},{instruction:"pickmirrorsumindenom",from:function(o){return o.deps.getFacs(o.target.objs[o.qnum],o.choices[o.qnum])}}]},validate:function(o){var first,second;first=o.deps.lookUp(o.target.objs[0],o.deps.facPath(o.choices[0],o.selection[0][0]));second=o.deps.lookUp(o.target.objs[1],o.deps.facPath(o.choices[1],o.selection[1][0]));if(o.deps.isMirrorSums(mixin({obj1:first,obj2:second},o))){return OK}else{return Err("mustselectnegmirrorsums")}},auto:function(o){var chosen,res,_ref1;res=o.deps.findFracFacPairs(mixin({pairer:o.deps.mirrorSumFacPairer},o));chosen=(_ref1=res.mirrorsums)!=null?_ref1[0]:void 0;if(chosen){return{selection:[[chosen[1]],[chosen[2]]],choices:chosen[0]}}else{return Err("nomirrorsumstoeliminate")}},perform:function(o){var choices,numersumpath,sels,_ref1;choices=o.choices;sels=o.selection;numersumpath=[0].concat(o.deps.facPath(choices[0],sels[0][0]));o.beforemark(numersumpath);o.beforemark([1].concat(o.deps.facPath(choices[1],sels[1][0])));o["do"]("addTwoNegOneFacsToExpression","addnegonestouseformirroring",{aim:numersumpath,direction:"right"});o["do"]("mirrorSumWithNegInProd","nowwenegatthesumfactor",{aim:numersumpath,selection:[[1],[0]]});numersumpath=numersumpath.concat(0);if((_ref1=choices[0])==="facs"||_ref1==="negchildfacs"){o["do"]("absorbProductFacs","integrateresultintonumer",{aim:numersumpath.slice(0,-2),selection:[[sels[0][0]]]})}choices[0]=o.deps.toProdPath(choices[0]);return o["do"]("eliminateFromFrac","nowweeliminatethesums",{choices:choices,selection:sels})}};eliminateSameBasePowsInSumsInFrac={info:{name:"eliminateSameBasePowsInSumsInFrac",effect:"simplifying",example:{str:"(-x+(pi/x2))/x3",choices:["negchild","denomself","self"],selection:[[0],[0],[0]],argument:one},uses:["oneExpPowerToBase","extractPartFromPow","eliminateFromSumsInFrac","extractFacsFromFrac","movePowInFrac","oneDenomFracToNumer"],tags:["fraction","power","remove"],lesson:"power103"},prints:{instructions:["selectcommonbasefactoeliminatefrom","selectfactacticinnumerterm","selectfactacticindenomterm"],errors:["numerordenommustbesum","mustselectnumexpfacswithsamebases","numerdenomhavenocommonbasefacsintheirsums"],steps:["collapsepowone","extractpowertoeliminate","absorbextractedpowintotermprod","noweliminateextractedpows"]},target:{type:"fraction"},argument:{instruction:"ARGexptoremovefromcommonbases"},choices:{questions:function(o){var floor,n,q,term,_i,_j,_len,_len1,_ref1,_ref2;q=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.deps.getTerms(o.target.objs[floor]);for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){term=_ref2[n];
q.push({options:o.deps.getFacOptions(term,true),instruction:"selectfactacticin"+(floor?"denom":"numer")+"term",about:[floor,n]})}}return q}},selection:{max:1,questions:function(o){var floor,n,q,qbuilder,term,_i,_j,_len,_len1,_ref1,_ref2;qbuilder=function(o){var mychoice,myterm,_ref1;myterm=o.deps.getTerms(o.target.objs[0]).concat(o.deps.getTerms(o.target.objs[1]))[o.qnum];mychoice=(_ref1=o.choices)!=null?_ref1[o.qnum]:void 0;if(mychoice!=="none"){return o.deps.getFacs(myterm,mychoice)}else{return[]}};q=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.deps.getTerms(o.target.objs[floor]);for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){term=_ref2[n];q.push({instruction:"selectcommonbasefactoeliminatefrom",from:qbuilder})}}return q}},validate:function(o){var allterms,comp,denomterms,fac,mybases,n,numerterms,sel,sels,_i,_ref1;sels=o.selection;numerterms=o.deps.getTerms(o.target.objs[0]);denomterms=o.deps.getTerms(o.target.objs[1]);allterms=numerterms.concat(denomterms);mybases=function(){var _i,_len,_results;_results=[];for(n=_i=0,_len=sels.length;_i<_len;n=++_i){sel=sels[n];fac=o.deps.getFacs(allterms[n],o.choices[n])[sel[0]];if(fac.type!=="power"||!o.deps.isNumeric(fac.objs[1])){_results.push(fac)}else{_results.push(fac.objs[0])}}return _results}();for(n=_i=1,_ref1=mybases.length;1<=_ref1?_i<_ref1:_i>_ref1;n=1<=_ref1?++_i:--_i){comp=o.deps.isKindredSpirits(mixin({obj1:mybases[0],obj2:mybases[n]},o));if(!comp.result){return Err("mustselectnumexpfacswithsamebases")}}return OK},auto:function(o){var analysis,foundexps,foundhere,matches,n,ret,sourcebase,sourcechoice,sourceexp,sourcefac,sourceposs,sourcepossid,sourceresidue,sourcesels,stillhoping,targetbase,targetchoice,targetexp,targetfac,targetposs,targetpossid,targetremains,targetsels,targetterm,termnums,terms,used,_i,_j,_k,_len,_len1,_ref1,_ref2,_ref3,_ref4;terms=o.deps.getTerms(o.target.objs[0]).concat(o.deps.getTerms(o.target.objs[1]));termnums=terms.length;analysis=function(){var _i,_results;_results=[];for(n=_i=0;0<=termnums?_i<termnums:_i>termnums;n=0<=termnums?++_i:--_i){_results.push(o.deps.getFacPossibilities(mixin({oneatatime:true,allowdenom:true,obj:terms[n]},o)))}return _results}();used={};matches=[];foundexps=[];_ref1=analysis[0];for(sourcepossid=_i=0,_len=_ref1.length;_i<_len;sourcepossid=++_i){sourceposs=_ref1[sourcepossid];sourcechoice=sourceposs[0],sourcesels=sourceposs[1],sourcefac=sourceposs[2],sourceresidue=sourceposs[3];sourcefac=o.deps.digIfNeg(sourcefac);_ref2=sourcefac.type==="power"&&sourcefac.objs[1].type==="number"?sourcefac.objs:[sourcefac,one],sourcebase=_ref2[0],sourceexp=_ref2[1];stillhoping=true;foundexps=[sourceexp];ret={selection:[sourcesels],choices:[sourcechoice]};for(targetterm=_j=1;1<=termnums?_j<termnums:_j>termnums;targetterm=1<=termnums?++_j:--_j){if(!stillhoping){continue}foundhere=0;_ref3=analysis[targetterm];for(targetpossid=_k=0,_len1=_ref3.length;_k<_len1;targetpossid=++_k){targetposs=_ref3[targetpossid];if(!!foundhere){continue}targetchoice=targetposs[0],targetsels=targetposs[1],targetfac=targetposs[2],targetremains=targetposs[3];_ref4=targetfac.type==="power"&&targetfac.objs[1].type==="number"?targetfac.objs:[targetfac,one],targetbase=_ref4[0],targetexp=_ref4[1];if(o.deps.isKindredSpirits(mixin({obj1:sourcebase,obj2:targetbase},o)).result){foundhere=1;ret.selection.push(targetsels);ret.choices.push(targetchoice);foundexps.push(targetexp)}}if(!foundhere){stillhoping=false}}if(stillhoping){ret.argument=foundexps.sort(function(o1,o2){if(parseFloat(o1.val)<parseFloat(o2.val)){return-1}else{return 1}})[0];return ret}}return Err("numerdenomhavenocommonbasefacsintheirsums")},perform:function(o){var arg,choices,facpath,floor,fracback,fracpath,n,nowchoice,numnumerterms,sel,sels,termnum,termpath,wasnegchild,_i,_len,_ref1;sels=o.selection;choices=o.choices;arg=o.argument;numnumerterms=o.deps.getTerms(o.target.objs[0]).length;for(n=_i=0,_len=sels.length;_i<_len;n=++_i){sel=sels[n];floor=n<numnumerterms?0:1;termnum=floor===1?n-numnumerterms:n;termpath=[floor].concat(o.target.objs[floor].type==="sum"?[termnum]:[]);facpath=termpath.concat(o.deps.facPath(choices[n],sel[0]));o.beforemark(facpath);o["try"]("oneExpPowerToBase","collapsepowone",{aim:facpath});if(choices[n].slice(0,5)==="denom"||choices[n].slice(0,13)==="negchilddenom"){wasnegchild=choices[n].slice(0,13)==="negchilddenom";o["do"]("extractPartFromPow","extractnegpartofpowersinceindenom",{aim:facpath,argument:Neg(arg),direction:"left"});if((_ref1=choices[n])==="denomfacs"||_ref1==="denomnegchildfacs"||_ref1==="negchilddenomfacs"){o["do"]("absorbProductFacs","absorbextractedpowintodenomprod",{aim:facpath.slice(0,-1),selection:[sel]})}fracback=function(){switch(choices[n]){case"denomfacs":return-2;case"denomnegchildfacs":return-3;case"negchilddenomfacs":return-2;case"denomself":choices[n]="denomfacs";return-1;case"denomnegchild":choices[n]="denomnegchildfacs";return-2;case"negchilddenomself":choices[n]="negchilddenomfacs";return-1}}();fracpath=facpath.slice(0,fracback);nowchoice=choices[n].slice(0,3)==="neg"?choices[n].slice(13):choices[n].slice(5);o["do"]("extractFacsFromFrac","extractpowfromdenom",{aim:fracpath,choices:["self",nowchoice],selection:[[],sels[n]],direction:"left"});o["do"]("movePowInFrac","makeextractedpowpositive",{aim:fracpath.concat(0),choices:["denom","self"],selection:[[0]]});o["try"]("oneDenomFracToNumer","cleanuponedenom",{aim:fracpath.concat(0)});choices[n]=wasnegchild?"negchildfacs":"facs";sels[n]=[0]}else{if(!o.deps.equal(o.deps.getNumExp(o.deps.lookUp(o.target,facpath)),arg)){o["do"]("extractPartFromPow","extractpowertoeliminate",{aim:facpath,argument:arg,direction:"left"});switch(choices[n]){case"facs":case"negchildfacs":o["do"]("absorbProductFacs","absorbextractedpowintotermprod",{aim:facpath.slice(0,-1),selection:[sel]});break;case"self":choices[n]="facs";break;case"negchild":choices[n]="negchildfacs"}}}}return o["do"]("eliminateFromSumsInFrac","noweliminateextractedpows",{selection:sels,choices:choices})}};eliminateInnerNumFacsInSumsInFrac={info:{name:"eliminateInnerNumFacsInSumsInFrac",effect:"simplifying",example:{str:"(3x-6)/9",argument:three,choices:["facs","negchild","self"],selection:[[0],[0],[0]]},uses:["exposeFacInNumber","absorbProductFacs","eliminateFromSumsInFrac"],tags:["fraction","remove","integer","division","factorise"],lesson:"fraction102"},prints:{errors:["numerordenommustbesum","facnotdividablebyargument","numerdenomhavenocommonfacsinthesums","mustbewholenumberoverone"],steps:["extractchosenfac","absorbrevealedfacintotermprod","noweliminaterevealedfacs"],instructions:["enterinnerfactoeliminate","selectfactacticinnumerterm","selectfactacticindenomterm","selectfactoshortenargfrom"]},target:{type:"fraction"},choices:{questions:function(o){var floor,n,q,term,_i,_j,_len,_len1,_ref1,_ref2;q=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.deps.getTerms(o.target.objs[floor]);for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){term=_ref2[n];q.push({options:o.deps.getFacOptions(term,false,false,true),instruction:"selectfactacticin"+(floor?"denom":"numer")+"term",about:[floor,n]})}}return q}},selection:{max:1,questions:function(o){var floor,n,q,qbuilder,qfilter,term,_i,_j,_len,_len1,_ref1,_ref2;qfilter=function(o){if(!o.deps.isNumeric(o.item)){return Err("mustselectposnegnum")}else if(!o.deps.divideCheck(mixin({obj2:o.argument,obj1:o.deps.digIfNeg(o.item)})).found){console.log("WHATTHEEFF,NERRRD",o.argument,o.item);return Err("facnotdividablebyargument")}else{return OK}};qbuilder=function(o){var mychoice,myterm,_ref1;myterm=o.deps.getTerms(o.target.objs[0]).concat(o.deps.getTerms(o.target.objs[1]))[o.qnum];mychoice=(_ref1=o.choices)!=null?_ref1[o.qnum]:void 0;if(mychoice!=="none"){return o.deps.getFacs(myterm,mychoice)}else{return[]}};q=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.deps.getTerms(o.target.objs[floor]);for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){term=_ref2[n];q.push({instruction:"selectfactoshortenargfrom",from:qbuilder,filter:qfilter})}}return q}},argument:{type:"number",instruction:"enterinnerfactoeliminate",validate:function(o){if(o.deps.numberValue(o.argument)>1){return OK}else{return Err("mustbewholenumberoverone")}}},auto:function(o){var analysis,divisor,exps,founddivs,foundhere,matches,n,ret,sourcechoice,sourcefac,sourceother,sourceposs,sourcepossid,sourceresidue,sourcesels,stillhoping,targetchoice,targetfac,targetposs,targetpossid,targetremains,targetsels,targetterm,termnums,terms,used,_i,_j,_k,_len,_len1,_ref1,_ref2;terms=o.deps.getTerms(o.target.objs[0]).concat(o.deps.getTerms(o.target.objs[1]));termnums=terms.length;analysis=function(){var _i,_results;_results=[];for(n=_i=0;0<=termnums?_i<termnums:_i>termnums;n=0<=termnums?++_i:--_i){_results.push(o.deps.getFacPossibilities(mixin({oneatatime:true,allowpowbase:true,obj:terms[n]},o)))}return _results}();used={};matches=[];founddivs=[];_ref1=analysis[0];for(sourcepossid=_i=0,_len=_ref1.length;_i<_len;sourcepossid=++_i){sourceposs=_ref1[sourcepossid];sourcechoice=sourceposs[0],sourcesels=sourceposs[1],sourcefac=sourceposs[2],sourceresidue=sourceposs[3],sourceother=sourceposs[4];if(sourcefac.type==="number"||sourceresidue.length&&o.deps.isNumeric(sourcefac)){sourcefac=o.deps.digIfNeg(sourcefac);stillhoping=true;founddivs=[];exps=sourcechoice==="powbase"||sourcechoice==="negchildpowbase"?1:0;ret={selection:[sourcesels],choices:[sourcechoice]};for(targetterm=_j=1;1<=termnums?_j<termnums:_j>termnums;targetterm=1<=termnums?++_j:--_j){if(!stillhoping){continue}foundhere=0;_ref2=analysis[targetterm];for(targetpossid=_k=0,_len1=_ref2.length;_k<_len1;targetpossid=++_k){targetposs=_ref2[targetpossid];if(!!foundhere){continue}targetchoice=targetposs[0],targetsels=targetposs[1],targetfac=targetposs[2],targetremains=targetposs[3];if(targetfac.type==="number"||targetremains.length&&o.deps.isNumeric(targetfac)){divisor=o.deps.findLargestCommonDivisor(sourcefac,o.deps.digIfNeg(targetfac));if(!o.deps.equal(divisor,one)&&!((sourcechoice==="powbase"||sourcechoice==="negchildpowbase")&&!o.deps.equal(divisor,targetfac))){exps+=sourcechoice==="powbase"||sourcechoice==="negchildpowbase"?1:0;foundhere=1;ret.selection.push(targetsels);ret.choices.push(targetchoice);founddivs.push(divisor)}}}if(!foundhere){stillhoping=false}}if(stillhoping&&exps<termnums){ret.argument=founddivs.sort(function(o1,o2){if(parseFloat(o1.val)<parseFloat(o2.val)){return-1}else{return 1}})[0];return ret}}}return Err("numerdenomhavenocommonfacsinthesums")},perform:function(o){var arg,choices,facpath,floor,n,numnumerterms,sel,sels,termnum,termpath,_i,_len,_ref1;sels=o.selection;choices=o.choices;arg=o.argument;numnumerterms=o.deps.getTerms(o.target.objs[0]).length;for(n=_i=0,_len=sels.length;_i<_len;n=++_i){sel=sels[n];floor=n<numnumerterms?0:1;termnum=floor===1?n-numnumerterms:n;termpath=[floor].concat(o.target.objs[floor].type==="sum"?[termnum]:[]);facpath=termpath.concat(o.deps.facPath(choices[n],sel[0]));o.beforemark(facpath);if(!o.deps.equal(o.deps.lookUp(o.target,facpath),arg)){o["do"]("exposeFacInNumber","extractchosenfac",{aim:facpath,argument:arg,direction:"left"});if((_ref1=choices[n])==="facs"||_ref1==="negchildfacs"||_ref1==="numerfacs"||_ref1==="negchildnumerfacs"||_ref1==="numernegchildfacs"){o["do"]("absorbProductFacs","absorbrevealedfacintotermprod",{aim:facpath.slice(0,-1),selection:[sel]})}choices[n]=o.deps.toProdPath(choices[n])}}return o["do"]("eliminateFromSumsInFrac","noweliminaterevealedfacs",{selection:sels,choices:choices})}};eliminateFromSumsInFrac={info:{name:"eliminateFromSumsInFrac",effect:"simplifying",example:{str:"((yx+x)/-x)",choices:["facs","self","negchild"],selection:[[1],[0],[0]]},returns:"shrunkfraction",uses:["extractFacsFromTerms","eliminateFromFrac"],tags:["fraction","remove","factorise"],lesson:"fraction102"},prints:{errors:["numerordenommustbesum","mustselectequalfacs","numerdenomhavenocommonfacsinthesums"],steps:["extractchosenfacsfromnumer","extractchosenfacsfromdenom","eliminateextractedfacs"],instructions:["selectfactacticinnumerterm","selectfactacticindenomterm","selectfactoeliminate"]},target:{type:"fraction"},choices:{questions:function(o){var floor,n,q,term,_i,_j,_len,_len1,_ref1,_ref2;q=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.deps.getTerms(o.target.objs[floor]);for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){term=_ref2[n];q.push({options:o.deps.getFacOptions(term,false,false,true),instruction:"selectfactacticin"+(floor?"denom":"numer")+"term",about:[floor,n]})}}return q}},selection:{min:1,questions:function(o){var floor,n,q,qbuilder,term,_i,_j,_len,_len1,_ref1,_ref2;qbuilder=function(o){var mychoice,myterm,_ref1;myterm=o.deps.getTerms(o.target.objs[0]).concat(o.deps.getTerms(o.target.objs[1]))[o.qnum];mychoice=(_ref1=o.choices)!=null?_ref1[o.qnum]:void 0;if(mychoice!=="none"){return o.deps.getFacs(myterm,mychoice)}else{return[]}};q=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.deps.getTerms(o.target.objs[floor]);for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){term=_ref2[n];q.push({instruction:"selectfactoeliminate",from:qbuilder})}}return q}},validate:function(o){var allterms,comp,denomterms,mypicks,n,numerterms,sel,sels,_i,_ref1;sels=o.selection;numerterms=o.deps.getTerms(o.target.objs[0]);denomterms=o.deps.getTerms(o.target.objs[1]);allterms=numerterms.concat(denomterms);mypicks=function(){var _i,_len,_results;_results=[];for(n=_i=0,_len=sels.length;_i<_len;n=++_i){sel=sels[n];_results.push(o.deps.collapseStubList(Prod(o.deps.getFacs(allterms[n],o.choices[n]).filter(function(fac,facpos){return __indexOf.call(sel,facpos)>=0}))))}return _results}();for(n=_i=1,_ref1=mypicks.length;1<=_ref1?_i<_ref1:_i>_ref1;n=1<=_ref1?++_i:--_i){comp=o.deps.isKindredSpirits(mixin({obj1:mypicks[0],obj2:mypicks[n]},o));if(!comp.result){return Err("mustselectequalfacs")}}return OK},auto:function(o){var analysis,foundhere,matches,n,ret,sourcechoice,sourcefac,sourceposs,sourcepossid,sourceresidue,sourcesels,stillhoping,targetchoice,targetfac,targetposs,targetpossid,targetremains,targetsels,targetterm,termnums,terms,used,_i,_j,_k,_len,_len1,_ref1,_ref2;terms=o.deps.getTerms(o.target.objs[0]).concat(o.deps.getTerms(o.target.objs[1]));termnums=terms.length;analysis=function(){var _i,_results;_results=[];for(n=_i=0;0<=termnums?_i<termnums:_i>termnums;n=0<=termnums?++_i:--_i){_results.push(o.deps.getFacPossibilities(mixin({obj:terms[n]},o)))}return _results}();used={};matches=[];_ref1=analysis[0].sort(function(a,b){if(o.deps.getFacs(a[2]).length<o.deps.getFacs(b[2]).length){return 1}else{return-1}});for(sourcepossid=_i=0,_len=_ref1.length;_i<_len;sourcepossid=++_i){sourceposs=_ref1[sourcepossid];sourcechoice=sourceposs[0],sourcesels=sourceposs[1],sourcefac=sourceposs[2],sourceresidue=sourceposs[3];stillhoping=true;ret={selection:[sourcesels],choices:[sourcechoice],toextract:sourcefac};for(targetterm=_j=1;1<=termnums?_j<termnums:_j>termnums;targetterm=1<=termnums?++_j:--_j){if(!stillhoping){continue}foundhere=0;_ref2=analysis[targetterm];for(targetpossid=_k=0,_len1=_ref2.length;_k<_len1;targetpossid=++_k){targetposs=_ref2[targetpossid];if(!!foundhere){continue}targetchoice=targetposs[0],targetsels=targetposs[1],targetfac=targetposs[2],targetremains=targetposs[3];if(o.deps.isKindredSpirits(mixin({obj1:sourcefac,obj2:targetfac},o)).result){foundhere=1;ret.selection.push(targetsels);ret.choices.push(targetchoice)}}if(!foundhere){stillhoping=false}}if(stillhoping){return ret}}return Err("numerdenomhavenocommonfacsinthesums")},perform:function(o){var choices,denomelim,floor,n,numelim,numnumerterms,s,sel,sels,termnum,termpath,_i,_j,_len,_len1;sels=o.selection;choices=o.choices;numnumerterms=o.deps.getTerms(o.target.objs[0]).length;for(n=_i=0,_len=sels.length;_i<_len;n=++_i){sel=sels[n];if(!sel.length){continue}floor=n<numnumerterms?0:1;termnum=floor===1?n-numnumerterms:n;termpath=[floor].concat(o.target.objs[floor].type==="sum"?[termnum]:[]);for(_j=0,_len1=sel.length;_j<_len1;_j++){s=sel[_j];o.beforemark(termpath.concat(o.deps.facPath(choices[n],s)))}}if(numnumerterms>1){o["do"]("extractFacsFromTerms","extractchosenfacsfromnumer",{aim:[0],selection:sels.slice(0,numnumerterms),choices:choices.slice(0,numnumerterms),direction:"left"});numelim={c:"facs",s:[0]}}else{numelim={c:choices[0],s:sels[0]}}if(sels.length-numnumerterms>1){o["do"]("extractFacsFromTerms","extractchosenfacsfromdenom",{aim:[1],selection:sels.slice(numnumerterms),choices:choices.slice(numnumerterms),direction:"left"});denomelim={c:"facs",s:[0]}}else{denomelim={c:choices[numnumerterms],s:sels[numnumerterms]}}return o["do"]("eliminateFromFrac","eliminateextractedfacs",{choices:[numelim.c,denomelim.c],selection:[numelim.s,denomelim.s]})}};collapseNegationsInSumsInFrac={info:{name:"collapseNegationsInSumsInFrac",effect:"simplifying",example:{str:"((y*-x-p)/-x)",choices:["facs","self","self"],selection:[[1],[0],[0]]},returns:"fraction",uses:["negToNegOneFacProd","absorbProductFacs","extractFacsFromFrac","collapseNegOneDenom","extractFacsFromTerms","eliminateFromFrac"],tags:["fraction","negation","collapse"],lesson:"fraction102"},prints:{errors:["TARnumerordenommustbesum","AUTOnotalltermsinnumerdenomhavenegs"],steps:[],instructions:["CHOfactacticinnumerterm","CHOfactacticindenomterm","SELnegfactocollapse"]},target:{type:"fraction"},choices:{questions:function(o){var floor,n,q,term,_i,_j,_len,_len1,_ref1,_ref2;q=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.deps.getTerms(o.target.objs[floor]);for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){term=_ref2[n];q.push({options:o.deps.getFacOptions(term,true,true),instruction:"CHOfactacticin"+(floor?"denom":"numer")+"term",about:[floor,n]})}}return q}},selection:{min:1,filter:"negation",questions:function(o){var floor,n,q,qbuilder,term,_i,_j,_len,_len1,_ref1,_ref2;qbuilder=function(o){var mychoice,myterm,_ref1;myterm=o.deps.getTerms(o.target.objs[0]).concat(o.deps.getTerms(o.target.objs[1]))[o.qnum];mychoice=(_ref1=o.choices)!=null?_ref1[o.qnum]:void 0;if(mychoice!=="none"){return o.deps.getFacs(myterm,mychoice)}else{return[]}};q=[];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];_ref2=o.deps.getTerms(o.target.objs[floor]);for(n=_j=0,_len1=_ref2.length;_j<_len1;n=++_j){term=_ref2[n];q.push({instruction:"SELnegfactocollapse",from:qbuilder})}}return q}},auto:function(o){var analysis,n,negposs,ret,termnums,terms,_i;terms=o.deps.getTerms(o.target.objs[0]).concat(o.deps.getTerms(o.target.objs[1]));termnums=terms.length;analysis=function(){var _i,_results;_results=[];for(n=_i=0;0<=termnums?_i<termnums:_i>termnums;n=0<=termnums?++_i:--_i){_results.push(o.deps.getFacPossibilities(mixin({oneatatime:true,nonegdig:true,allowdenom:true,obj:terms[n]},o)))}return _results}();ret={selection:[],choices:[]};for(n=_i=0;0<=termnums?_i<termnums:_i>termnums;n=0<=termnums?++_i:--_i){negposs=analysis[n].filter(function(poss){return poss[2].type==="negation"});if(negposs.length){ret.selection.push(negposs[0][1]);ret.choices.push(negposs[0][0])}else{return Err("AUTOnotalltermsinnumerdenomhavenegs")}}return ret},perform:function(o){var basepath,choices,denomelim,floor,n,numelim,numnumerterms,path,sel,sels,termnum,_i,_ref1,_ref2;sels=o.selection;choices=o.choices;numnumerterms=o.deps.getTerms(o.target.objs[0]).length;for(n=_i=0,_ref1=sels.length;0<=_ref1?_i<_ref1:_i>_ref1;n=0<=_ref1?++_i:--_i){floor=n>=numnumerterms?1:0;sel=sels[n][0];termnum=floor?n-numnumerterms:n;basepath=[floor].concat(o.target.objs[floor].type==="sum"?[termnum]:[]);path=basepath.concat(o.deps.facPath(choices[n],sel));o.beforemark(path);o.aftermark(path);if(!o.deps.equal(o.deps.lookUp(o.target,path),Neg(one))){o["do"]("negToNegOneFacProd","expandnegfac",{aim:path,direction:"left"});if(o.deps.lookUp(o.target,path.slice(0,-1)).type==="product"){o["do"]("absorbProductFacs","falttenintoprod",{aim:path.slice(0,-1),selection:[[sel]]})}else{choices[n]=o.deps.toProdPath(choices[n])}if((_ref2=choices[n].slice(0,5))==="numer"||_ref2==="denom"){if(choices[n].slice(0,5)==="numer"){o["do"]("extractFacsFromFrac","liftoutnegfromnumer",{aim:basepath,choices:[choices[n].slice(5),"self"],selection:[[sel],[]],direction:"left"})}else{o["do"]("extractFacsFromFrac","liftoutnegfromdenom",{aim:basepath,choices:["self",choices[n].slice(5)],selection:[[],[sel]],direction:"left"});o.doIf("collapseNegOneDenom","liftupnegfromdenom",{aim:basepath.concat([0])})}choices[n]="facs";sels[n]=[0]}}}if(numnumerterms>1){o["do"]("extractFacsFromTerms","extractnegfromnumer",{aim:[0],selection:sels.slice(0,numnumerterms),choices:choices.slice(0,numnumerterms),direction:"left"});numelim={c:"facs",s:[0]}}else{numelim={c:choices[0],s:sels[0]}}if(sels.length-numnumerterms>1){o["do"]("extractFacsFromTerms","extractnegfromdenom",{aim:[1],selection:sels.slice(numnumerterms),choices:choices.slice(numnumerterms),direction:"left"});denomelim={c:"facs",s:[0]}}else{denomelim={c:choices[numnumerterms],s:sels[numnumerterms]}}return o["do"]("eliminateFromFrac","eliminatenegs",{choices:[numelim.c,denomelim.c],selection:[numelim.s,denomelim.s]})}};extractFacsFromFrac={info:{name:"extractFacsFromFrac",effect:"complicating",example:{str:"(2*x*y)/(3*z)",selection:[[1],[0]],direction:"right",choices:["facs","facs"]},uses:["multiplyByOne","extractFacsFromExpression","biProdFracToBiFracProd","oneDenomFracToNumer"],tags:["fraction","factorise"],lesson:"factorise",circle:["extractFacsFromExpression"],opposite:"multFacsIntoFrac"},prints:{instructions:["choosenumerfactactic","choosedenomfactactic","choosesideforextractfacs"],steps:["chosenonesoaddingonefac","extractchosenfacsfromfloor","nowsplittingfrac","removingdenomone"]},target:"fraction",direction:"choosesideforextractfacs",choices:fracPickChoices,selection:{or0:true,totalmin:1,questions:[{from:function(o){var _ref1;return o.deps.getFacs(o.target.objs[0],(_ref1=o.choices)!=null?_ref1[0]:void 0)}},{from:function(o){var _ref1;return o.deps.getFacs(o.target.objs[1],(_ref1=o.choices)!=null?_ref1[1]:void 0)}}]},perform:function(o){var choices,dir,floor,oppdir,originalselection,s,sel,_i,_j,_len,_len1,_ref1;originalselection=deepcopy(o.selection);dir=o.direction;oppdir=dir==="right"?"left":"right";choices=o.choices||["facs","facs"];_ref1=[0,1];for(_i=0,_len=_ref1.length;_i<_len;_i++){floor=_ref1[_i];sel=originalselection[floor];if(sel.length===0){o["do"]("multiplyByOne","chosenonesoaddingonefac",{aim:[floor],direction:dir})}else{for(_j=0,_len1=sel.length;_j<_len1;_j++){s=sel[_j];o.beforemark([floor].concat(o.deps.facPath(choices[floor],s)))}o.doIf("extractFacsFromExpression","extractchosenfacsfromfloor",{aim:[floor],direction:dir,selection:[sel],choices:[choices[floor]]})}}o["do"]("biProdFracToBiFracProd","nowsplittingfrac");if(!sel.length){o["do"]("oneDenomFracToNumer","removingdenomone",{aim:[dir==="right"?[1]:[0]]})}o["try"]("oneDenomFracToNumer","removingdenomone",{aim:[dir==="right"?[0]:[1]]});return o.aftermark(dir==="right"?[1]:[0])}};prolongNumericFraction={info:{name:"prolongNumericFraction",effect:"complicating",example:{str:"4/5",argument:Num(10)},uses:["prolongFraction","absorbProductFacs","multiplyAllNumFacs"],tags:["fraction","multiplication","rationalnum"],lesson:"fraction101"},target:"fraction",prints:{steps:["weprolongwithmissingfac","thenwemultiplythedenom","flattenthenumer","cleanupthenumer"],instructions:["ARGenternumericfactoprolongwith"],errors:["ARGmustnotbezero"]},argument:{type:"numeric",instruction:"ARGenternumericfactoprolongwith",validate:function(o){if(o.deps.equal(o.argument,zero||o.deps.equal(o.argument,Neg(zero)))){return Err("ARGmustnotbezero")}else{return OK}}},perform:function(o){var path;path=o.target.type==="negation"?[0]:[];o["do"]("prolongFraction","weprolongwithdesiredfac",{aim:path,direction:"left",argument:o.argument});o["try"]("multiplyAllNumFacs","thenwemultiplythedenom",{aim:path.concat(1)});o["try"]("absorbProductFacs","flattenthenumer",{aim:path.concat(0)});return o["try"]("multiplyAllNumFacs","cleanupthenumer",{aim:path.concat(0)})}};prolongFraction={info:{name:"prolongFraction",effect:"complicating",example:{str:"x/y",argument:z,direction:"right"},uses:["multiplyByOne","oneToSameNumerDenomFrac","biFracProdToBiProdFrac"],tags:["fraction","introduce"],lesson:"fraction101"},prints:{instructions:["enterfactoprolongwith"],steps:["addfaconeforexpanding","expandingfacwitharg","mergingfacs"]},target:"fraction",direction:{instruction:"DIRchooseside"},argument:{instruction:"enterfactoprolongwith"},perform:function(o){o["do"]("multiplyByOne","addfaconeforexpanding");o["do"]("oneToSameNumerDenomFrac","expandingfacwitharg",{aim:[o.dirnum()]});o["do"]("biFracProdToBiProdFrac","mergingfacs");return o.aftermark([[0,o.dirnum()],[1,o.dirnum()]])}};sumNumerFracToSum={info:{name:"sumNumerFracToSum",effect:"complicating",example:"(3x2-7)/y",uses:["extractFacsFromFrac","distribute","multFacsIntoFrac"],tags:["fraction","numerator","sum","split"],lesson:"sum102"},prints:{errors:["TARnumermustbesum"],steps:["firstweextractnumer","nowmultinthenumer","wemulttermintonumer"]},target:{type:"fraction",validate:function(_arg){var numer;numer=_arg.target.objs[0];if(numer.type==="sum"){return OK}else{return Err("TARnumermustbesum")}}},perform:function(o){var n,_i,_ref1;o["do"]("extractFacsFromFrac","firstweextractnumer",{choices:["self","self"],selection:[[0],[]],direction:"left"});o["do"]("distribute","nowmultinthenumer",{selection:[[0]],direction:"right"});for(n=_i=0,_ref1=o.target.objs.length;0<=_ref1?_i<_ref1:_i>_ref1;n=0<=_ref1?++_i:--_i){o["do"]("multFacsIntoFrac","wemulttermintonumer",{aim:[n],selection:[[1],[0]]})}return o}};decimalifyFracFacs={info:{name:"decimalifyFracFacs",effect:"decimalifying",example:{str:"4x/3",choices:["facs","self"],selection:[[0],[0]]},uses:["extractFacsFromFrac","fracWithNegNumToDecNum","fracToDecNum","multiplyNumFacs","multFacsIntoFrac","collapseNegNumerDenomFacs"],tags:["fraction","decimal"],lesson:"decimalnums"},prints:{errors:[],steps:["firstweextractnums","thenturnfractodec","sincefracmultin","purgenegs","multnumstogether"]},target:"fraction",auto:function(o){var fac,facs,floorname,floornum,n,obj,pics,ret,_i,_j,_len,_len1,_ref1;pics=[];ret={choices:[],selection:[[],[]]};_ref1=["numer","denom"];for(floornum=_i=0,_len=_ref1.length;_i<_len;floornum=++_i){floorname=_ref1[floornum];obj=o.target.objs[floornum];if(obj.type==="product"){ret.choices.push("facs");facs=obj.objs}else{ret.choices.push("self");facs=[obj]}for(n=_j=0,_len1=facs.length;_j<_len1;n=++_j){fac=facs[n];if((fac.type==="number"||fac.type==="negation"&&fac.objs[0].type==="number")&&!o.deps.equal(fac,one)){ret.selection[floornum].push(n)}}}if(ret.selection[1].length===0){return Err("AUTOnonumsindenom")}else{return ret}},perform:function(o){var floor,sel,_i,_j,_len,_ref1;o["do"]("extractFacsFromFrac","firstweextractnums");o["try"]("multiplyNumFacs","multnumstogether",{aim:[0,0]});o["try"]("multiplyNumFacs","multnumstogether",{aim:[0,1]});o["try"]("collapseNegNumerDenomFacs","purgenegs",{aim:[0]});o.doIf("fracWithNegNumToDecNum","thenturnfractodec",{aim:[0]});o.doIf("fracToDecNum","thenturnfractodec",{aim:[0]});o.doIf("multFacsIntoFrac","sincefracmultin",{selection:[[1],[0]]});for(floor=_i=0;_i<=1;floor=++_i){_ref1=o.selection[floor];for(_j=0,_len=_ref1.length;_j<_len;_j++){sel=_ref1[_j];o.beforemark(o.choices[floor]==="self"?[floor]:[floor,sel])}}return o.aftermark(o.target.type==="product"?[0]:[0,0])}};elimFacWithFracFac={info:{name:"elimFacWithFracFac",effect:"simplifying",example:{str:"x*(2/x)",selection:[[0],[1],[0]],choices:["self"]},tags:["fraction","eliminate"],lesson:"fraction102",uses:["multFacsIntoFrac","eliminateFromFrac","sameNumerDenomFracToOne"]},target:{type:"product"},choices:{options:function(o){var frac;frac=o.target.objs[o.selection[1][0]];if(frac.type==="negation"){frac=frac.objs[0]}return o.deps.getFacOptions(frac.objs[0])}},selection:{max:1,questions:[{},{filter:function(o){if(o.item.type==="fraction"||o.item.type==="negation"&&o.item.objs[0].type==="fraction"){return OK}else{return Err("SELmustbefracornegfrac")}}},{from:function(o){var frac;frac=o.target.objs[o.selection[1][0]];if(frac.type==="negation"){frac=frac.objs[0]}return o.deps.getFacs(frac.objs[0],o.choices[0])}}]},auto:function(o){var choice,collectopt,frac,fracfac,fracfacpos,fracpos,otherfac,otherfacpos,poss,remainingfacs,result,_i,_j,_k,_l,_len,_len1,_len2,_len3,_ref1,_ref2,_ref3,_ref4;_ref1=o.target.objs;for(fracpos=_i=0,_len=_ref1.length;_i<_len;fracpos=++_i){frac=_ref1[fracpos];if(frac.type==="negation"){frac=frac.objs[0]}if(frac.type==="fraction"){_ref2=o.deps.getFacPossibilities({obj:frac.objs[1],oneatatime:true,deps:o.deps});for(_j=0,_len1=_ref2.length;_j<_len1;_j++){poss=_ref2[_j];choice=poss[0],collectopt=poss[1],result=poss[2],remainingfacs=poss[3];_ref3=o.deps.getFacs(result);for(fracfacpos=_k=0,_len2=_ref3.length;_k<_len2;fracfacpos=++_k){fracfac=_ref3[fracfacpos];_ref4=o.target.objs;for(otherfacpos=_l=0,_len3=_ref4.length;_l<_len3;otherfacpos=++_l){otherfac=_ref4[otherfacpos];if(otherfacpos!==fracpos&&o.deps.equal(otherfac,fracfac)){return{choices:[choice],selection:[[otherfacpos],[fracpos],[fracfacpos]]}}}}}}}return Err("AUTOnomatch")},perform:function(o){var choice,frac,fracfacpos,fracpos,negfrac,newfracpath,numerfacs,numerone,otherfacpos,_ref1,_ref2,_ref3,_ref4;_ref1=o.selection,_ref2=_ref1[0],otherfacpos=_ref2[0],_ref3=_ref1[1],fracpos=_ref3[0],_ref4=_ref1[2],fracfacpos=_ref4[0];choice=o.choices[0];frac=o.target.objs[fracpos];o.beforemark(otherfacpos);negfrac=frac.type==="negation";if(negfrac){frac=frac.objs[0];o.beforemark([fracpos,0,1].concat(o.deps.facPath(choice,fracfacpos)))}else{o.beforemark([fracpos,1].concat(o.deps.facPath(choice,fracfacpos)))}numerone=o.deps.equal(frac.objs[0],one);numerfacs=o.deps.getFacs(frac.objs[0]).length;o["do"]("multFacsIntoFrac","moveintofrac",{selection:[[fracpos],[otherfacpos]]});newfracpath=o.target.type!=="product"?[]:[otherfacpos<fracpos?fracpos-1:fracpos];o.report("Ok, now i multed in",newfracpath);if(numerone&&!negfrac){return o["do"]("sameNumerDenomFracToOne","numer1so1",{aim:newfracpath})}else{return o["do"]("eliminateFromFrac","thenelim",{aim:newfracpath,choices:["facs",choice],selection:[[otherfacpos<fracpos?0:numerfacs],[fracfacpos]]})}}};if(typeof exports==="undefined"){exportTo=this.CATS.math}else{exportTo=exports}funcs={elimFacWithFracFac:elimFacWithFracFac,decimalifyFracFacs:decimalifyFracFacs,sumNumerFracToSum:sumNumerFracToSum,collapseNegationsInSumsInFrac:collapseNegationsInSumsInFrac,doubleNegFacPairer:doubleNegFacPairer,prolongNumericFraction:prolongNumericFraction,eliminateSameBasePowsInSumsInFrac:eliminateSameBasePowsInSumsInFrac,eliminateInnerNumFacsInSumsInFrac:eliminateInnerNumFacsInSumsInFrac,mirrorSumFacPairer:mirrorSumFacPairer,eliminateMirrorSumFacsFromFrac:eliminateMirrorSumFacsFromFrac,eliminateFromSumsInFrac:eliminateFromSumsInFrac,sameSpiritNumerDenomFracToOne:sameSpiritNumerDenomFracToOne,commonPosBaseNumFacPairer:commonPosBaseNumFacPairer,divideCheck:divideCheck,commonBaseNumFacPairer:commonBaseNumFacPairer,zeroDenomFracToUndef:zeroDenomFracToUndef,collapseNegOneDenom:collapseNegOneDenom,eliminateNegMirrorFacsFromFrac:eliminateNegMirrorFacsFromFrac,mirrorNegFacPairer:mirrorNegFacPairer,commonNumFacPairer:commonNumFacPairer,findFracFacPairs:findFracFacPairs,fracFacCombos:fracFacCombos,fracFacOptPairs:fracFacOptPairs,fracPickChoices:fracPickChoices,eliminateCommonInnerFacsInFrac:eliminateCommonInnerFacsInFrac,flattenFracNumerDenom:flattenFracNumerDenom,flattenFracDenom:flattenFracDenom,eliminateFromFrac:eliminateFromFrac,flattenFracNumer:flattenFracNumer,prolongFraction:prolongFraction,multFacsIntoFrac:multFacsIntoFrac,extractFacsFromFrac:extractFacsFromFrac,divideByOne:divideByOne,oneDenomFracToNumer:oneDenomFracToNumer,oneToSameNumerDenomFrac:oneToSameNumerDenomFrac,sameNumerDenomFracToOne:sameNumerDenomFracToOne,biProdFracToBiFracProd:biProdFracToBiFracProd,biFracProdToBiProdFrac:biFracProdToBiProdFrac};
for(k in funcs){v=funcs[k];exportTo[k]=v}}).call(this);